@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using TableTennisRanker.Data

@inject IFileService FileService
@inject CompetitorManager CompetitorManager
@inject AuthenticationStateProvider Auth

<PageTitle>Home</PageTitle>

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@_competitors" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value="@_selectedCompetitors">
    <Columns>
        <RadzenDataGridColumn Property="@nameof(Competitor.Id)" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn Property="@nameof(Competitor.FirstName)" Title="First Name" Frozen="true" Width="160px" />
        <RadzenDataGridColumn Property="@nameof(Competitor.LastName)" Title="Last Name" Width="160px"/>
        <RadzenDataGridColumn Property="@nameof(Competitor.EloPoints)" Title="Points" Width="160px"/>
        <RadzenDataGridColumn Property="@nameof(Competitor.GamesPlayed)" Title="Games Played" Width="160px"/>
    </Columns>
</RadzenDataGrid>
<div class="rz-p-0 rz-p-md-12">
    <RadzenTemplateForm TItem="Competitor" Data="@_competitor" Submit="@OnSubmit" InvalidSubmit="@OnInvalidSubmit">
        <RadzenStack>
            <RadzenFormField Text="First Name">
                <ChildContent>
                    <RadzenTextBox Name="FirstName" @bind-Value="@_competitor.FirstName" />
                </ChildContent>
                <Helper>
                    <RadzenRequiredValidator Component="FirstName" Text="First name is required." />
                </Helper>
            </RadzenFormField>
            <RadzenFormField Text="Last Name">
                <ChildContent>
                    <RadzenTextBox Name="LastName" @bind-Value="@_competitor.LastName" />
                </ChildContent>
                <Helper>
                    <RadzenRequiredValidator Component="LastName" Text="Last name is required." />
                </Helper>
            </RadzenFormField>
            <RadzenButton ButtonType="ButtonType.Submit" Text="Submit" ></RadzenButton>
        </RadzenStack>
    </RadzenTemplateForm>
</div>
@if (Admin)
{
    <div class="rz-p-0 rz-p-md-12">
        <RadzenRow Gap="1rem">
            <RadzenColumn Size="12" SizeSM="6">
                <RadzenStack>
                    <RadzenFormField Text="Challenger">
                        <ChildContent>
                            <RadzenDropDown Name="Challenger" Data="@_competitors" @bind-Value="@_selectedForRemoval" />
                        </ChildContent>
                        <Helper>
                            <RadzenRequiredValidator Component="Challenger" Text="First name is required." />
                        </Helper>
                    </RadzenFormField>
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Remove" Click="OnRemove"></RadzenButton>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </div>
}

@code {
    IQueryable<Competitor>? _competitors;
    IList<Competitor?>? _selectedCompetitors;
    Competitor? _selectedForRemoval;
    private bool Admin { get; set; }

    readonly Competitor _competitor = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Admin = (await Auth.GetAuthenticationStateAsync()).User.Identity?.Name == "ODIN\\B.Disseldorp";
        CompetitorManager.Competitors = await FileService.LoadCompetitors() ?? [];
        _competitors = new EnumerableQuery<Competitor?>(CompetitorManager.Competitors);
        _selectedCompetitors = [_competitors.FirstOrDefault()];
    }

    async Task OnSubmit(Competitor competitor)
    {
        competitor.Id = CompetitorManager.Competitors.LastOrDefault() == null ? 0 : CompetitorManager.Competitors.Last().Id + 1;
        CompetitorManager.Competitors.Add(new Competitor(competitor.Id, competitor.FirstName, competitor.LastName, competitor.EloPoints, competitor.GamesPlayed));
        _competitors = new EnumerableQuery<Competitor?>(CompetitorManager.Competitors);
        await FileService.SaveCompetitors(CompetitorManager.Competitors);
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {

    }

    async Task OnRemove()
    {
        if (_selectedForRemoval != null) CompetitorManager.RemoveCompetitor(_selectedForRemoval);
        _competitors = new EnumerableQuery<Competitor?>(CompetitorManager.Competitors);
        await FileService.SaveCompetitors(CompetitorManager.Competitors);
    }
}
